/* globals d3 */
var urlHtml = "1KiS9NDIoduptAiWL5UybvfQ3KzF91f3ikQ0vk3nUNUQ";

var container = d3.select("#studentsViz");
var dicStudents = d3.map(),
  dicTopics = d3.map(),
  r = d3.scaleLinear()
    .range([40, 60]);

var canvas = container.append("canvas")
    .attr("width", 600)
    .attr("height", 600)
    .node(),
  context = canvas.getContext("2d"),
  width = canvas.width,
  height = canvas.height;

var simulation = d3.forceSimulation()
  .force("link", d3.forceLink()
    .id(function(d) { return d.name; })
    .distance(150))
  .force("charge", d3.forceManyBody()
    .strength(-300))
  .force("center", d3.forceCenter(width / 2, height / 2));

function dragstarted() {
  if (!d3.event.active) simulation.alphaTarget(0.3).restart();
  d3.event.subject.fx = d3.event.subject.x;
  d3.event.subject.fy = d3.event.subject.y;
}

function dragged() {
  d3.event.subject.fx = d3.event.x;
  d3.event.subject.fy = d3.event.y;
}

function dragended() {
  if (!d3.event.active) simulation.alphaTarget(0);
  d3.event.subject.fx = null;
  d3.event.subject.fy = null;
}

function drawLink(d) {
  context.moveTo(d.source.x, d.source.y);
  context.lineTo(d.target.x, d.target.y);
}

function drawNode(d) {
  var dr =  d.type==="topic" ? r(d.numberStudents): 40;
  context.moveTo(d.x + dr, d.y);
  context.arc(d.x, d.y, dr, 0, 2 * Math.PI);
  context.fillText(d.name, d.x, d.y);
}

function getGraph(data) {
  var graph = {};
  
  dicStudents = d3.map();
  dicTopics = d3.map();
  graph.nodes = [];
  data.forEach(function (d) {
    d.topics = d.topics.split(",");
    dicStudents.set(d.name, d);
    d.topics.forEach(function (t) {
      t = t.trim();
      if (!dicTopics.has(t)) {
        dicTopics.set(t, []);
      }
      var studentListOnTopic = dicTopics.get(t);
      studentListOnTopic.push(d);
      dicTopics.set(t, studentListOnTopic);
    });
  });

  graph.nodes = data;
  graph.links = [];

  r.domain(d3.extent(
    dicTopics.entries(), 
    function (d) { return d.value.length; }
  ));
  graph.nodes = graph.nodes.concat(dicTopics.entries()
    .map(function (t) {
      return {
        name:t.key, 
        type:"topic",
        numberStudents:t.value.length
      };
    }));

  dicTopics.each(function (studentListOnTopic, t) {
    studentListOnTopic.forEach(function (s) {
      graph.links.push({
        source:s.name,
        target:t
      });
    });
  });
  return graph;
}

function update(data) {
  console.log(data.length);
  

  var graph = getGraph(data);

  simulation
      .nodes(graph.nodes)
      .on("tick", ticked);

  simulation.force("link")
      .links(graph.links);

  d3.select(canvas)
      .call(d3.drag()
          .container(canvas)
          .subject(dragsubject)
          .on("start", dragstarted)
          .on("drag", dragged)
          .on("end", dragended));

  function ticked() {
    context.clearRect(0, 0, width, height);

    context.beginPath();
    graph.links.forEach(drawLink);
    context.strokeStyle = "#aaa";
    context.stroke();

    context.beginPath();
    graph.nodes.forEach(drawNode);
    context.fill();
    context.strokeStyle = "#fff";
    context.stroke();
  }

  function dragsubject() {
    return simulation.find(d3.event.x, d3.event.y);
  }


  


}


function updateFromGSheet(data) {

  update(data);
}

function init() {
  Tabletop.init( { key: urlHtml,
                   callback: updateFromGSheet,
                   simpleSheet: true } )
}

// Update from googleSheets
window.onload = function() { init(); };


